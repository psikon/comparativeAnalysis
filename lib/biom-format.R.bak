biom_generator <- function(id = NULL, 
                           format = "Biological Observation Matrix 1.0",
                           format_url = "http://biom-format.org/documentation/format_versions/biom-1.0.html",
                           type = "OTU table") {
    # initialize otu cache
    otu_cache <- new_otu_cache()
    # initialize the index
    otu_index <- 0
    # generated by
    generated_by <- paste("metaR", packageVersion("metaR"))
    # date
    date <- format(Sys.time(), "%Y-%m-%dT%H:%M:%S")
    #
    to_biom <- function(db_list) {
        mat_list <- otu_list <- list()
        generate.row <- row.generator()
        foreach(db = iter(db_list), sample = icount(length(db_list))) %do% {
            if (is.null(metadata(db)$SampleId)) {
                stop("TaxonomyReport '", basename(path(db)), "' without 'SampleId' in metadata field")
            }
            count <- table(db_query(conn(db), "SELECT tax_id FROM taxonomy", 1))
            foreach(taxid = iter(names(count)), taxcount = iter(count)) %do% {
                if (!otu_cache$has_key(taxid)) {
                    otu_index <<- otu_index + 1
                    otu_cache$set(taxid, otu_index)
                    # create the row statement for new otu
                    otu_row <- list(
                        id = taxid,
                        metadata = list(taxonomy = generate.row(taxid))
                    )
                    otu_list <- c(otu_list, list(otu_row))
                } 
                # create the data section for new otu or existing otu
                mat_list <- c(mat_list, list(c(otu_cache$get(taxid)-1, sample-1, taxcount)))
                invisible()
            }
        }
        return(list(otu = otu_list, data = mat_list))
    }
    
    function(db_list) {
        biom_list <- to_biom(db_list)
        columns <- generate.column(db_list)
        on.exit({
            otu_cache$reset()
            otu_index <<- 0
        })
        biom::biom(
            list(
                id = id, format = format, format_url = format_url,
                type = type, generated_by = generated_by, date = date,
                rows = biom_list$otu, columns = columns, matrix_type = "sparse",
                matrix_element_type = "int",
                shape = c(length(biom_list$otu), length(columns)),
                data = biom_list$data
            )
        )
    }
}


row.generator <- function() {
    meta.ranks <- c("superkingdom", "phylum", "class", "order", "family", "genus", "species")
    meta.prefix <- c("k__", "p__", "c__", "o__", "f__", "g__", "s__")
    function(taxid) {
        lineage <- getLineage(taxonDB(taxid))
        ranks <- ncbi::getRank(lineage)
        prefix <- meta.prefix
        prefix[meta.ranks %ni% ranks] <- ""
        valid <- ranks %in% meta.ranks
        sciname <- gsub(" ", "_", ncbi::getScientificName(lineage)[valid])
        ifelse(meta.prefix == prefix, paste0(prefix, sciname), meta.prefix)
    }
}


generate.column <- function(db_list) {
    cols <- list()
    foreach(db = iter(db_list)) %do% {
        id <- metadata(db)$SampleId
        metadata <- metadata(db)
        metadata$SampleId <- NULL
        cols <- c(cols, list(list(id = id, metadata = metadata)))
    }
    cols
}

to_biom <- biom_generator()

   